# Generated from Skaban.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        8,
        346,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        1,
        0,
        5,
        0,
        76,
        8,
        0,
        10,
        0,
        12,
        0,
        79,
        9,
        0,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        3,
        3,
        3,
        90,
        8,
        3,
        1,
        3,
        3,
        3,
        93,
        8,
        3,
        1,
        3,
        3,
        3,
        96,
        8,
        3,
        1,
        4,
        1,
        4,
        1,
        4,
        5,
        4,
        101,
        8,
        4,
        10,
        4,
        12,
        4,
        104,
        9,
        4,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        3,
        5,
        111,
        8,
        5,
        1,
        6,
        1,
        6,
        3,
        6,
        115,
        8,
        6,
        1,
        7,
        1,
        7,
        4,
        7,
        119,
        8,
        7,
        11,
        7,
        12,
        7,
        120,
        1,
        8,
        3,
        8,
        124,
        8,
        8,
        1,
        8,
        5,
        8,
        127,
        8,
        8,
        10,
        8,
        12,
        8,
        130,
        9,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        9,
        1,
        9,
        1,
        9,
        5,
        9,
        138,
        8,
        9,
        10,
        9,
        12,
        9,
        141,
        9,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        11,
        1,
        11,
        3,
        11,
        149,
        8,
        11,
        1,
        12,
        1,
        12,
        3,
        12,
        153,
        8,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        3,
        13,
        160,
        8,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        17,
        1,
        17,
        3,
        17,
        180,
        8,
        17,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        20,
        1,
        20,
        1,
        20,
        3,
        20,
        193,
        8,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        3,
        20,
        199,
        8,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        3,
        20,
        209,
        8,
        20,
        1,
        20,
        1,
        20,
        3,
        20,
        213,
        8,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        3,
        21,
        218,
        8,
        21,
        1,
        21,
        1,
        21,
        3,
        21,
        222,
        8,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        3,
        21,
        227,
        8,
        21,
        1,
        21,
        1,
        21,
        1,
        22,
        1,
        22,
        3,
        22,
        233,
        8,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        5,
        22,
        239,
        8,
        22,
        10,
        22,
        12,
        22,
        242,
        9,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        246,
        8,
        22,
        1,
        23,
        1,
        23,
        3,
        23,
        250,
        8,
        23,
        1,
        24,
        1,
        24,
        3,
        24,
        254,
        8,
        24,
        1,
        25,
        1,
        25,
        3,
        25,
        258,
        8,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        3,
        25,
        269,
        8,
        25,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        28,
        1,
        28,
        1,
        28,
        3,
        28,
        282,
        8,
        28,
        1,
        28,
        1,
        28,
        1,
        29,
        1,
        29,
        3,
        29,
        288,
        8,
        29,
        1,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        293,
        8,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        297,
        8,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        301,
        8,
        30,
        3,
        30,
        303,
        8,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        310,
        8,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        314,
        8,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        319,
        8,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        323,
        8,
        30,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        33,
        1,
        33,
        1,
        34,
        1,
        34,
        1,
        35,
        4,
        35,
        340,
        8,
        35,
        11,
        35,
        12,
        35,
        341,
        1,
        36,
        1,
        36,
        1,
        36,
        0,
        0,
        37,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        0,
        4,
        1,
        0,
        4,
        5,
        1,
        0,
        3,
        4,
        2,
        0,
        5,
        5,
        7,
        7,
        1,
        0,
        3,
        8,
        366,
        0,
        77,
        1,
        0,
        0,
        0,
        2,
        82,
        1,
        0,
        0,
        0,
        4,
        85,
        1,
        0,
        0,
        0,
        6,
        89,
        1,
        0,
        0,
        0,
        8,
        97,
        1,
        0,
        0,
        0,
        10,
        110,
        1,
        0,
        0,
        0,
        12,
        114,
        1,
        0,
        0,
        0,
        14,
        116,
        1,
        0,
        0,
        0,
        16,
        123,
        1,
        0,
        0,
        0,
        18,
        134,
        1,
        0,
        0,
        0,
        20,
        142,
        1,
        0,
        0,
        0,
        22,
        148,
        1,
        0,
        0,
        0,
        24,
        152,
        1,
        0,
        0,
        0,
        26,
        159,
        1,
        0,
        0,
        0,
        28,
        161,
        1,
        0,
        0,
        0,
        30,
        167,
        1,
        0,
        0,
        0,
        32,
        173,
        1,
        0,
        0,
        0,
        34,
        177,
        1,
        0,
        0,
        0,
        36,
        181,
        1,
        0,
        0,
        0,
        38,
        185,
        1,
        0,
        0,
        0,
        40,
        212,
        1,
        0,
        0,
        0,
        42,
        226,
        1,
        0,
        0,
        0,
        44,
        240,
        1,
        0,
        0,
        0,
        46,
        249,
        1,
        0,
        0,
        0,
        48,
        253,
        1,
        0,
        0,
        0,
        50,
        268,
        1,
        0,
        0,
        0,
        52,
        270,
        1,
        0,
        0,
        0,
        54,
        274,
        1,
        0,
        0,
        0,
        56,
        278,
        1,
        0,
        0,
        0,
        58,
        287,
        1,
        0,
        0,
        0,
        60,
        322,
        1,
        0,
        0,
        0,
        62,
        324,
        1,
        0,
        0,
        0,
        64,
        329,
        1,
        0,
        0,
        0,
        66,
        334,
        1,
        0,
        0,
        0,
        68,
        336,
        1,
        0,
        0,
        0,
        70,
        339,
        1,
        0,
        0,
        0,
        72,
        343,
        1,
        0,
        0,
        0,
        74,
        76,
        3,
        2,
        1,
        0,
        75,
        74,
        1,
        0,
        0,
        0,
        76,
        79,
        1,
        0,
        0,
        0,
        77,
        75,
        1,
        0,
        0,
        0,
        77,
        78,
        1,
        0,
        0,
        0,
        78,
        80,
        1,
        0,
        0,
        0,
        79,
        77,
        1,
        0,
        0,
        0,
        80,
        81,
        3,
        4,
        2,
        0,
        81,
        1,
        1,
        0,
        0,
        0,
        82,
        83,
        3,
        6,
        3,
        0,
        83,
        84,
        5,
        2,
        0,
        0,
        84,
        3,
        1,
        0,
        0,
        0,
        85,
        86,
        3,
        6,
        3,
        0,
        86,
        87,
        5,
        0,
        0,
        1,
        87,
        5,
        1,
        0,
        0,
        0,
        88,
        90,
        5,
        1,
        0,
        0,
        89,
        88,
        1,
        0,
        0,
        0,
        89,
        90,
        1,
        0,
        0,
        0,
        90,
        92,
        1,
        0,
        0,
        0,
        91,
        93,
        3,
        8,
        4,
        0,
        92,
        91,
        1,
        0,
        0,
        0,
        92,
        93,
        1,
        0,
        0,
        0,
        93,
        95,
        1,
        0,
        0,
        0,
        94,
        96,
        5,
        1,
        0,
        0,
        95,
        94,
        1,
        0,
        0,
        0,
        95,
        96,
        1,
        0,
        0,
        0,
        96,
        7,
        1,
        0,
        0,
        0,
        97,
        102,
        3,
        10,
        5,
        0,
        98,
        99,
        5,
        1,
        0,
        0,
        99,
        101,
        3,
        10,
        5,
        0,
        100,
        98,
        1,
        0,
        0,
        0,
        101,
        104,
        1,
        0,
        0,
        0,
        102,
        100,
        1,
        0,
        0,
        0,
        102,
        103,
        1,
        0,
        0,
        0,
        103,
        9,
        1,
        0,
        0,
        0,
        104,
        102,
        1,
        0,
        0,
        0,
        105,
        111,
        3,
        12,
        6,
        0,
        106,
        111,
        3,
        14,
        7,
        0,
        107,
        111,
        3,
        22,
        11,
        0,
        108,
        111,
        3,
        16,
        8,
        0,
        109,
        111,
        3,
        70,
        35,
        0,
        110,
        105,
        1,
        0,
        0,
        0,
        110,
        106,
        1,
        0,
        0,
        0,
        110,
        107,
        1,
        0,
        0,
        0,
        110,
        108,
        1,
        0,
        0,
        0,
        110,
        109,
        1,
        0,
        0,
        0,
        111,
        11,
        1,
        0,
        0,
        0,
        112,
        115,
        3,
        18,
        9,
        0,
        113,
        115,
        3,
        20,
        10,
        0,
        114,
        112,
        1,
        0,
        0,
        0,
        114,
        113,
        1,
        0,
        0,
        0,
        115,
        13,
        1,
        0,
        0,
        0,
        116,
        118,
        3,
        12,
        6,
        0,
        117,
        119,
        3,
        12,
        6,
        0,
        118,
        117,
        1,
        0,
        0,
        0,
        119,
        120,
        1,
        0,
        0,
        0,
        120,
        118,
        1,
        0,
        0,
        0,
        120,
        121,
        1,
        0,
        0,
        0,
        121,
        15,
        1,
        0,
        0,
        0,
        122,
        124,
        5,
        3,
        0,
        0,
        123,
        122,
        1,
        0,
        0,
        0,
        123,
        124,
        1,
        0,
        0,
        0,
        124,
        128,
        1,
        0,
        0,
        0,
        125,
        127,
        7,
        0,
        0,
        0,
        126,
        125,
        1,
        0,
        0,
        0,
        127,
        130,
        1,
        0,
        0,
        0,
        128,
        126,
        1,
        0,
        0,
        0,
        128,
        129,
        1,
        0,
        0,
        0,
        129,
        131,
        1,
        0,
        0,
        0,
        130,
        128,
        1,
        0,
        0,
        0,
        131,
        132,
        5,
        4,
        0,
        0,
        132,
        133,
        5,
        3,
        0,
        0,
        133,
        17,
        1,
        0,
        0,
        0,
        134,
        135,
        7,
        1,
        0,
        0,
        135,
        139,
        5,
        5,
        0,
        0,
        136,
        138,
        7,
        2,
        0,
        0,
        137,
        136,
        1,
        0,
        0,
        0,
        138,
        141,
        1,
        0,
        0,
        0,
        139,
        137,
        1,
        0,
        0,
        0,
        139,
        140,
        1,
        0,
        0,
        0,
        140,
        19,
        1,
        0,
        0,
        0,
        141,
        139,
        1,
        0,
        0,
        0,
        142,
        143,
        5,
        4,
        0,
        0,
        143,
        144,
        5,
        6,
        0,
        0,
        144,
        145,
        5,
        3,
        0,
        0,
        145,
        21,
        1,
        0,
        0,
        0,
        146,
        149,
        3,
        24,
        12,
        0,
        147,
        149,
        3,
        26,
        13,
        0,
        148,
        146,
        1,
        0,
        0,
        0,
        148,
        147,
        1,
        0,
        0,
        0,
        149,
        23,
        1,
        0,
        0,
        0,
        150,
        153,
        3,
        28,
        14,
        0,
        151,
        153,
        3,
        30,
        15,
        0,
        152,
        150,
        1,
        0,
        0,
        0,
        152,
        151,
        1,
        0,
        0,
        0,
        153,
        25,
        1,
        0,
        0,
        0,
        154,
        160,
        3,
        32,
        16,
        0,
        155,
        160,
        3,
        34,
        17,
        0,
        156,
        160,
        3,
        36,
        18,
        0,
        157,
        160,
        3,
        38,
        19,
        0,
        158,
        160,
        3,
        40,
        20,
        0,
        159,
        154,
        1,
        0,
        0,
        0,
        159,
        155,
        1,
        0,
        0,
        0,
        159,
        156,
        1,
        0,
        0,
        0,
        159,
        157,
        1,
        0,
        0,
        0,
        159,
        158,
        1,
        0,
        0,
        0,
        160,
        27,
        1,
        0,
        0,
        0,
        161,
        162,
        5,
        4,
        0,
        0,
        162,
        163,
        5,
        5,
        0,
        0,
        163,
        164,
        5,
        4,
        0,
        0,
        164,
        165,
        5,
        4,
        0,
        0,
        165,
        166,
        5,
        5,
        0,
        0,
        166,
        29,
        1,
        0,
        0,
        0,
        167,
        168,
        5,
        4,
        0,
        0,
        168,
        169,
        5,
        4,
        0,
        0,
        169,
        170,
        5,
        5,
        0,
        0,
        170,
        171,
        5,
        4,
        0,
        0,
        171,
        172,
        5,
        5,
        0,
        0,
        172,
        31,
        1,
        0,
        0,
        0,
        173,
        174,
        3,
        42,
        21,
        0,
        174,
        175,
        3,
        68,
        34,
        0,
        175,
        176,
        3,
        44,
        22,
        0,
        176,
        33,
        1,
        0,
        0,
        0,
        177,
        179,
        3,
        46,
        23,
        0,
        178,
        180,
        3,
        44,
        22,
        0,
        179,
        178,
        1,
        0,
        0,
        0,
        179,
        180,
        1,
        0,
        0,
        0,
        180,
        35,
        1,
        0,
        0,
        0,
        181,
        182,
        3,
        48,
        24,
        0,
        182,
        183,
        3,
        68,
        34,
        0,
        183,
        184,
        3,
        44,
        22,
        0,
        184,
        37,
        1,
        0,
        0,
        0,
        185,
        186,
        3,
        50,
        25,
        0,
        186,
        187,
        3,
        68,
        34,
        0,
        187,
        188,
        3,
        44,
        22,
        0,
        188,
        39,
        1,
        0,
        0,
        0,
        189,
        192,
        3,
        52,
        26,
        0,
        190,
        193,
        3,
        66,
        33,
        0,
        191,
        193,
        3,
        68,
        34,
        0,
        192,
        190,
        1,
        0,
        0,
        0,
        192,
        191,
        1,
        0,
        0,
        0,
        192,
        193,
        1,
        0,
        0,
        0,
        193,
        194,
        1,
        0,
        0,
        0,
        194,
        195,
        3,
        24,
        12,
        0,
        195,
        213,
        1,
        0,
        0,
        0,
        196,
        198,
        3,
        54,
        27,
        0,
        197,
        199,
        3,
        66,
        33,
        0,
        198,
        197,
        1,
        0,
        0,
        0,
        198,
        199,
        1,
        0,
        0,
        0,
        199,
        200,
        1,
        0,
        0,
        0,
        200,
        201,
        3,
        24,
        12,
        0,
        201,
        213,
        1,
        0,
        0,
        0,
        202,
        203,
        3,
        56,
        28,
        0,
        203,
        204,
        3,
        66,
        33,
        0,
        204,
        205,
        3,
        28,
        14,
        0,
        205,
        213,
        1,
        0,
        0,
        0,
        206,
        208,
        3,
        56,
        28,
        0,
        207,
        209,
        3,
        66,
        33,
        0,
        208,
        207,
        1,
        0,
        0,
        0,
        208,
        209,
        1,
        0,
        0,
        0,
        209,
        210,
        1,
        0,
        0,
        0,
        210,
        211,
        3,
        30,
        15,
        0,
        211,
        213,
        1,
        0,
        0,
        0,
        212,
        189,
        1,
        0,
        0,
        0,
        212,
        196,
        1,
        0,
        0,
        0,
        212,
        202,
        1,
        0,
        0,
        0,
        212,
        206,
        1,
        0,
        0,
        0,
        213,
        41,
        1,
        0,
        0,
        0,
        214,
        217,
        3,
        52,
        26,
        0,
        215,
        218,
        3,
        66,
        33,
        0,
        216,
        218,
        3,
        68,
        34,
        0,
        217,
        215,
        1,
        0,
        0,
        0,
        217,
        216,
        1,
        0,
        0,
        0,
        217,
        218,
        1,
        0,
        0,
        0,
        218,
        227,
        1,
        0,
        0,
        0,
        219,
        221,
        3,
        54,
        27,
        0,
        220,
        222,
        3,
        66,
        33,
        0,
        221,
        220,
        1,
        0,
        0,
        0,
        221,
        222,
        1,
        0,
        0,
        0,
        222,
        227,
        1,
        0,
        0,
        0,
        223,
        224,
        3,
        56,
        28,
        0,
        224,
        225,
        3,
        66,
        33,
        0,
        225,
        227,
        1,
        0,
        0,
        0,
        226,
        214,
        1,
        0,
        0,
        0,
        226,
        219,
        1,
        0,
        0,
        0,
        226,
        223,
        1,
        0,
        0,
        0,
        227,
        228,
        1,
        0,
        0,
        0,
        228,
        229,
        3,
        52,
        26,
        0,
        229,
        43,
        1,
        0,
        0,
        0,
        230,
        232,
        3,
        52,
        26,
        0,
        231,
        233,
        3,
        68,
        34,
        0,
        232,
        231,
        1,
        0,
        0,
        0,
        232,
        233,
        1,
        0,
        0,
        0,
        233,
        239,
        1,
        0,
        0,
        0,
        234,
        235,
        3,
        48,
        24,
        0,
        235,
        236,
        3,
        68,
        34,
        0,
        236,
        239,
        1,
        0,
        0,
        0,
        237,
        239,
        3,
        58,
        29,
        0,
        238,
        230,
        1,
        0,
        0,
        0,
        238,
        234,
        1,
        0,
        0,
        0,
        238,
        237,
        1,
        0,
        0,
        0,
        239,
        242,
        1,
        0,
        0,
        0,
        240,
        238,
        1,
        0,
        0,
        0,
        240,
        241,
        1,
        0,
        0,
        0,
        241,
        245,
        1,
        0,
        0,
        0,
        242,
        240,
        1,
        0,
        0,
        0,
        243,
        246,
        3,
        58,
        29,
        0,
        244,
        246,
        3,
        24,
        12,
        0,
        245,
        243,
        1,
        0,
        0,
        0,
        245,
        244,
        1,
        0,
        0,
        0,
        246,
        45,
        1,
        0,
        0,
        0,
        247,
        250,
        3,
        42,
        21,
        0,
        248,
        250,
        3,
        60,
        30,
        0,
        249,
        247,
        1,
        0,
        0,
        0,
        249,
        248,
        1,
        0,
        0,
        0,
        250,
        47,
        1,
        0,
        0,
        0,
        251,
        254,
        3,
        62,
        31,
        0,
        252,
        254,
        3,
        64,
        32,
        0,
        253,
        251,
        1,
        0,
        0,
        0,
        253,
        252,
        1,
        0,
        0,
        0,
        254,
        49,
        1,
        0,
        0,
        0,
        255,
        257,
        3,
        52,
        26,
        0,
        256,
        258,
        3,
        66,
        33,
        0,
        257,
        256,
        1,
        0,
        0,
        0,
        257,
        258,
        1,
        0,
        0,
        0,
        258,
        259,
        1,
        0,
        0,
        0,
        259,
        260,
        3,
        48,
        24,
        0,
        260,
        269,
        1,
        0,
        0,
        0,
        261,
        262,
        3,
        58,
        29,
        0,
        262,
        263,
        3,
        66,
        33,
        0,
        263,
        264,
        3,
        64,
        32,
        0,
        264,
        269,
        1,
        0,
        0,
        0,
        265,
        266,
        3,
        58,
        29,
        0,
        266,
        267,
        3,
        62,
        31,
        0,
        267,
        269,
        1,
        0,
        0,
        0,
        268,
        255,
        1,
        0,
        0,
        0,
        268,
        261,
        1,
        0,
        0,
        0,
        268,
        265,
        1,
        0,
        0,
        0,
        269,
        51,
        1,
        0,
        0,
        0,
        270,
        271,
        5,
        4,
        0,
        0,
        271,
        272,
        5,
        5,
        0,
        0,
        272,
        273,
        5,
        4,
        0,
        0,
        273,
        53,
        1,
        0,
        0,
        0,
        274,
        275,
        5,
        4,
        0,
        0,
        275,
        276,
        5,
        4,
        0,
        0,
        276,
        277,
        5,
        5,
        0,
        0,
        277,
        55,
        1,
        0,
        0,
        0,
        278,
        279,
        5,
        4,
        0,
        0,
        279,
        281,
        5,
        5,
        0,
        0,
        280,
        282,
        5,
        7,
        0,
        0,
        281,
        280,
        1,
        0,
        0,
        0,
        281,
        282,
        1,
        0,
        0,
        0,
        282,
        283,
        1,
        0,
        0,
        0,
        283,
        284,
        5,
        5,
        0,
        0,
        284,
        57,
        1,
        0,
        0,
        0,
        285,
        288,
        3,
        54,
        27,
        0,
        286,
        288,
        3,
        56,
        28,
        0,
        287,
        285,
        1,
        0,
        0,
        0,
        287,
        286,
        1,
        0,
        0,
        0,
        288,
        59,
        1,
        0,
        0,
        0,
        289,
        292,
        3,
        52,
        26,
        0,
        290,
        293,
        3,
        66,
        33,
        0,
        291,
        293,
        3,
        68,
        34,
        0,
        292,
        290,
        1,
        0,
        0,
        0,
        292,
        291,
        1,
        0,
        0,
        0,
        292,
        293,
        1,
        0,
        0,
        0,
        293,
        303,
        1,
        0,
        0,
        0,
        294,
        296,
        3,
        54,
        27,
        0,
        295,
        297,
        3,
        66,
        33,
        0,
        296,
        295,
        1,
        0,
        0,
        0,
        296,
        297,
        1,
        0,
        0,
        0,
        297,
        303,
        1,
        0,
        0,
        0,
        298,
        300,
        3,
        56,
        28,
        0,
        299,
        301,
        3,
        66,
        33,
        0,
        300,
        299,
        1,
        0,
        0,
        0,
        300,
        301,
        1,
        0,
        0,
        0,
        301,
        303,
        1,
        0,
        0,
        0,
        302,
        289,
        1,
        0,
        0,
        0,
        302,
        294,
        1,
        0,
        0,
        0,
        302,
        298,
        1,
        0,
        0,
        0,
        303,
        304,
        1,
        0,
        0,
        0,
        304,
        305,
        3,
        54,
        27,
        0,
        305,
        323,
        1,
        0,
        0,
        0,
        306,
        309,
        3,
        52,
        26,
        0,
        307,
        310,
        3,
        66,
        33,
        0,
        308,
        310,
        3,
        68,
        34,
        0,
        309,
        307,
        1,
        0,
        0,
        0,
        309,
        308,
        1,
        0,
        0,
        0,
        309,
        310,
        1,
        0,
        0,
        0,
        310,
        319,
        1,
        0,
        0,
        0,
        311,
        313,
        3,
        54,
        27,
        0,
        312,
        314,
        3,
        66,
        33,
        0,
        313,
        312,
        1,
        0,
        0,
        0,
        313,
        314,
        1,
        0,
        0,
        0,
        314,
        319,
        1,
        0,
        0,
        0,
        315,
        316,
        3,
        56,
        28,
        0,
        316,
        317,
        3,
        66,
        33,
        0,
        317,
        319,
        1,
        0,
        0,
        0,
        318,
        306,
        1,
        0,
        0,
        0,
        318,
        311,
        1,
        0,
        0,
        0,
        318,
        315,
        1,
        0,
        0,
        0,
        319,
        320,
        1,
        0,
        0,
        0,
        320,
        321,
        3,
        56,
        28,
        0,
        321,
        323,
        1,
        0,
        0,
        0,
        322,
        302,
        1,
        0,
        0,
        0,
        322,
        318,
        1,
        0,
        0,
        0,
        323,
        61,
        1,
        0,
        0,
        0,
        324,
        325,
        5,
        4,
        0,
        0,
        325,
        326,
        5,
        4,
        0,
        0,
        326,
        327,
        5,
        5,
        0,
        0,
        327,
        328,
        5,
        4,
        0,
        0,
        328,
        63,
        1,
        0,
        0,
        0,
        329,
        330,
        5,
        4,
        0,
        0,
        330,
        331,
        5,
        5,
        0,
        0,
        331,
        332,
        5,
        4,
        0,
        0,
        332,
        333,
        5,
        4,
        0,
        0,
        333,
        65,
        1,
        0,
        0,
        0,
        334,
        335,
        5,
        4,
        0,
        0,
        335,
        67,
        1,
        0,
        0,
        0,
        336,
        337,
        5,
        6,
        0,
        0,
        337,
        69,
        1,
        0,
        0,
        0,
        338,
        340,
        3,
        72,
        36,
        0,
        339,
        338,
        1,
        0,
        0,
        0,
        340,
        341,
        1,
        0,
        0,
        0,
        341,
        339,
        1,
        0,
        0,
        0,
        341,
        342,
        1,
        0,
        0,
        0,
        342,
        71,
        1,
        0,
        0,
        0,
        343,
        344,
        7,
        3,
        0,
        0,
        344,
        73,
        1,
        0,
        0,
        0,
        41,
        77,
        89,
        92,
        95,
        102,
        110,
        114,
        120,
        123,
        128,
        139,
        148,
        152,
        159,
        179,
        192,
        198,
        208,
        212,
        217,
        221,
        226,
        232,
        238,
        240,
        245,
        249,
        253,
        257,
        268,
        281,
        287,
        292,
        296,
        300,
        302,
        309,
        313,
        318,
        322,
        341,
    ]


class SkabanParser(Parser):

    grammarFileName = "Skaban.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'.'",
        "<INVALID>",
        "<INVALID>",
        "'y'",
        "'''",
    ]

    symbolicNames = ["<INVALID>", "WS", "NEWLINE", "DOT", "C", "V", "Y", "AP", "EXTRA"]

    RULE_folio = 0
    RULE_line = 1
    RULE_end = 2
    RULE_flufftence = 3
    RULE_sentence = 4
    RULE_word = 5
    RULE_cmavo = 6
    RULE_jonvla = 7
    RULE_cmene = 8
    RULE_karmaho = 9
    RULE_lerfu = 10
    RULE_brivla = 11
    RULE_gismu = 12
    RULE_lujvo = 13
    RULE_kargismu = 14
    RULE_gahorgismu = 15
    RULE_bobvo = 16
    RULE_cobvo = 17
    RULE_dobvo = 18
    RULE_fobvo = 19
    RULE_gobvo = 20
    RULE_ganlyrelrafsi = 21
    RULE_jvorebla = 22
    RULE_relrafsi = 23
    RULE_gimsygenja = 24
    RULE_rafsygimsygenja = 25
    RULE_ganlycmarafsi = 26
    RULE_gahorkarcmarafsi = 27
    RULE_karkarcmarafsi = 28
    RULE_karcmarafsi = 29
    RULE_karlyrelrafsi = 30
    RULE_gahorgimsygenja = 31
    RULE_kargimsygenja = 32
    RULE_q = 33
    RULE_y = 34
    RULE_fuhivla = 35
    RULE_anychar = 36

    ruleNames = [
        "folio",
        "line",
        "end",
        "flufftence",
        "sentence",
        "word",
        "cmavo",
        "jonvla",
        "cmene",
        "karmaho",
        "lerfu",
        "brivla",
        "gismu",
        "lujvo",
        "kargismu",
        "gahorgismu",
        "bobvo",
        "cobvo",
        "dobvo",
        "fobvo",
        "gobvo",
        "ganlyrelrafsi",
        "jvorebla",
        "relrafsi",
        "gimsygenja",
        "rafsygimsygenja",
        "ganlycmarafsi",
        "gahorkarcmarafsi",
        "karkarcmarafsi",
        "karcmarafsi",
        "karlyrelrafsi",
        "gahorgimsygenja",
        "kargimsygenja",
        "q",
        "y",
        "fuhivla",
        "anychar",
    ]

    EOF = Token.EOF
    WS = 1
    NEWLINE = 2
    DOT = 3
    C = 4
    V = 5
    Y = 6
    AP = 7
    EXTRA = 8

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class FolioContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def end(self):
            return self.getTypedRuleContext(SkabanParser.EndContext, 0)

        def line(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SkabanParser.LineContext)
            else:
                return self.getTypedRuleContext(SkabanParser.LineContext, i)

        def getRuleIndex(self):
            return SkabanParser.RULE_folio

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFolio"):
                listener.enterFolio(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFolio"):
                listener.exitFolio(self)

    def folio(self):

        localctx = SkabanParser.FolioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_folio)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 77
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 0, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 74
                    self.line()
                self.state = 79
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 0, self._ctx)

            self.state = 80
            self.end()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def flufftence(self):
            return self.getTypedRuleContext(SkabanParser.FlufftenceContext, 0)

        def NEWLINE(self):
            return self.getToken(SkabanParser.NEWLINE, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_line

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLine"):
                listener.enterLine(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLine"):
                listener.exitLine(self)

    def line(self):

        localctx = SkabanParser.LineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_line)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 82
            self.flufftence()
            self.state = 83
            self.match(SkabanParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def flufftence(self):
            return self.getTypedRuleContext(SkabanParser.FlufftenceContext, 0)

        def EOF(self):
            return self.getToken(SkabanParser.EOF, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_end

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnd"):
                listener.enterEnd(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnd"):
                listener.exitEnd(self)

    def end(self):

        localctx = SkabanParser.EndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_end)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 85
            self.flufftence()
            self.state = 86
            self.match(SkabanParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FlufftenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.WS)
            else:
                return self.getToken(SkabanParser.WS, i)

        def sentence(self):
            return self.getTypedRuleContext(SkabanParser.SentenceContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_flufftence

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFlufftence"):
                listener.enterFlufftence(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFlufftence"):
                listener.exitFlufftence(self)

    def flufftence(self):

        localctx = SkabanParser.FlufftenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_flufftence)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 89
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 1, self._ctx)
            if la_ == 1:
                self.state = 88
                self.match(SkabanParser.WS)

            self.state = 92
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and (
                (1 << _la)
                & (
                    (1 << SkabanParser.DOT)
                    | (1 << SkabanParser.C)
                    | (1 << SkabanParser.V)
                    | (1 << SkabanParser.Y)
                    | (1 << SkabanParser.AP)
                    | (1 << SkabanParser.EXTRA)
                )
            ) != 0:
                self.state = 91
                self.sentence()

            self.state = 95
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SkabanParser.WS:
                self.state = 94
                self.match(SkabanParser.WS)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SentenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def word(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SkabanParser.WordContext)
            else:
                return self.getTypedRuleContext(SkabanParser.WordContext, i)

        def WS(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.WS)
            else:
                return self.getToken(SkabanParser.WS, i)

        def getRuleIndex(self):
            return SkabanParser.RULE_sentence

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSentence"):
                listener.enterSentence(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSentence"):
                listener.exitSentence(self)

    def sentence(self):

        localctx = SkabanParser.SentenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_sentence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 97
            self.word()
            self.state = 102
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 98
                    self.match(SkabanParser.WS)
                    self.state = 99
                    self.word()
                self.state = 104
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WordContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmavo(self):
            return self.getTypedRuleContext(SkabanParser.CmavoContext, 0)

        def jonvla(self):
            return self.getTypedRuleContext(SkabanParser.JonvlaContext, 0)

        def brivla(self):
            return self.getTypedRuleContext(SkabanParser.BrivlaContext, 0)

        def cmene(self):
            return self.getTypedRuleContext(SkabanParser.CmeneContext, 0)

        def fuhivla(self):
            return self.getTypedRuleContext(SkabanParser.FuhivlaContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_word

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWord"):
                listener.enterWord(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWord"):
                listener.exitWord(self)

    def word(self):

        localctx = SkabanParser.WordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_word)
        try:
            self.state = 110
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 5, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 105
                self.cmavo()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 106
                self.jonvla()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 107
                self.brivla()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 108
                self.cmene()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 109
                self.fuhivla()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CmavoContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def karmaho(self):
            return self.getTypedRuleContext(SkabanParser.KarmahoContext, 0)

        def lerfu(self):
            return self.getTypedRuleContext(SkabanParser.LerfuContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_cmavo

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCmavo"):
                listener.enterCmavo(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCmavo"):
                listener.exitCmavo(self)

    def cmavo(self):

        localctx = SkabanParser.CmavoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_cmavo)
        try:
            self.state = 114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 6, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 112
                self.karmaho()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 113
                self.lerfu()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JonvlaContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmavo(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SkabanParser.CmavoContext)
            else:
                return self.getTypedRuleContext(SkabanParser.CmavoContext, i)

        def getRuleIndex(self):
            return SkabanParser.RULE_jonvla

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJonvla"):
                listener.enterJonvla(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJonvla"):
                listener.exitJonvla(self)

    def jonvla(self):

        localctx = SkabanParser.JonvlaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_jonvla)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 116
            self.cmavo()
            self.state = 118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 117
                self.cmavo()
                self.state = 120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == SkabanParser.DOT or _la == SkabanParser.C):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CmeneContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.C)
            else:
                return self.getToken(SkabanParser.C, i)

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.DOT)
            else:
                return self.getToken(SkabanParser.DOT, i)

        def V(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.V)
            else:
                return self.getToken(SkabanParser.V, i)

        def getRuleIndex(self):
            return SkabanParser.RULE_cmene

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCmene"):
                listener.enterCmene(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCmene"):
                listener.exitCmene(self)

    def cmene(self):

        localctx = SkabanParser.CmeneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_cmene)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SkabanParser.DOT:
                self.state = 122
                self.match(SkabanParser.DOT)

            self.state = 128
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 125
                    _la = self._input.LA(1)
                    if not (_la == SkabanParser.C or _la == SkabanParser.V):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                self.state = 130
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)

            self.state = 131
            self.match(SkabanParser.C)
            self.state = 132
            self.match(SkabanParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KarmahoContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def V(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.V)
            else:
                return self.getToken(SkabanParser.V, i)

        def DOT(self):
            return self.getToken(SkabanParser.DOT, 0)

        def C(self):
            return self.getToken(SkabanParser.C, 0)

        def AP(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.AP)
            else:
                return self.getToken(SkabanParser.AP, i)

        def getRuleIndex(self):
            return SkabanParser.RULE_karmaho

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKarmaho"):
                listener.enterKarmaho(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKarmaho"):
                listener.exitKarmaho(self)

    def karmaho(self):

        localctx = SkabanParser.KarmahoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_karmaho)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 134
            _la = self._input.LA(1)
            if not (_la == SkabanParser.DOT or _la == SkabanParser.C):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 135
            self.match(SkabanParser.V)
            self.state = 139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SkabanParser.V or _la == SkabanParser.AP:
                self.state = 136
                _la = self._input.LA(1)
                if not (_la == SkabanParser.V or _la == SkabanParser.AP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 141
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LerfuContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C(self):
            return self.getToken(SkabanParser.C, 0)

        def Y(self):
            return self.getToken(SkabanParser.Y, 0)

        def DOT(self):
            return self.getToken(SkabanParser.DOT, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_lerfu

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLerfu"):
                listener.enterLerfu(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLerfu"):
                listener.exitLerfu(self)

    def lerfu(self):

        localctx = SkabanParser.LerfuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_lerfu)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 142
            self.match(SkabanParser.C)
            self.state = 143
            self.match(SkabanParser.Y)
            self.state = 144
            self.match(SkabanParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BrivlaContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gismu(self):
            return self.getTypedRuleContext(SkabanParser.GismuContext, 0)

        def lujvo(self):
            return self.getTypedRuleContext(SkabanParser.LujvoContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_brivla

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBrivla"):
                listener.enterBrivla(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBrivla"):
                listener.exitBrivla(self)

    def brivla(self):

        localctx = SkabanParser.BrivlaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_brivla)
        try:
            self.state = 148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 146
                self.gismu()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 147
                self.lujvo()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GismuContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def kargismu(self):
            return self.getTypedRuleContext(SkabanParser.KargismuContext, 0)

        def gahorgismu(self):
            return self.getTypedRuleContext(SkabanParser.GahorgismuContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_gismu

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGismu"):
                listener.enterGismu(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGismu"):
                listener.exitGismu(self)

    def gismu(self):

        localctx = SkabanParser.GismuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_gismu)
        try:
            self.state = 152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 150
                self.kargismu()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 151
                self.gahorgismu()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LujvoContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bobvo(self):
            return self.getTypedRuleContext(SkabanParser.BobvoContext, 0)

        def cobvo(self):
            return self.getTypedRuleContext(SkabanParser.CobvoContext, 0)

        def dobvo(self):
            return self.getTypedRuleContext(SkabanParser.DobvoContext, 0)

        def fobvo(self):
            return self.getTypedRuleContext(SkabanParser.FobvoContext, 0)

        def gobvo(self):
            return self.getTypedRuleContext(SkabanParser.GobvoContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_lujvo

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLujvo"):
                listener.enterLujvo(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLujvo"):
                listener.exitLujvo(self)

    def lujvo(self):

        localctx = SkabanParser.LujvoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_lujvo)
        try:
            self.state = 159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 154
                self.bobvo()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 155
                self.cobvo()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 156
                self.dobvo()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 157
                self.fobvo()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 158
                self.gobvo()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KargismuContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.C)
            else:
                return self.getToken(SkabanParser.C, i)

        def V(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.V)
            else:
                return self.getToken(SkabanParser.V, i)

        def getRuleIndex(self):
            return SkabanParser.RULE_kargismu

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKargismu"):
                listener.enterKargismu(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKargismu"):
                listener.exitKargismu(self)

    def kargismu(self):

        localctx = SkabanParser.KargismuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_kargismu)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 161
            self.match(SkabanParser.C)
            self.state = 162
            self.match(SkabanParser.V)
            self.state = 163
            self.match(SkabanParser.C)
            self.state = 164
            self.match(SkabanParser.C)
            self.state = 165
            self.match(SkabanParser.V)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GahorgismuContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.C)
            else:
                return self.getToken(SkabanParser.C, i)

        def V(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.V)
            else:
                return self.getToken(SkabanParser.V, i)

        def getRuleIndex(self):
            return SkabanParser.RULE_gahorgismu

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGahorgismu"):
                listener.enterGahorgismu(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGahorgismu"):
                listener.exitGahorgismu(self)

    def gahorgismu(self):

        localctx = SkabanParser.GahorgismuContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_gahorgismu)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 167
            self.match(SkabanParser.C)
            self.state = 168
            self.match(SkabanParser.C)
            self.state = 169
            self.match(SkabanParser.V)
            self.state = 170
            self.match(SkabanParser.C)
            self.state = 171
            self.match(SkabanParser.V)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BobvoContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ganlyrelrafsi(self):
            return self.getTypedRuleContext(SkabanParser.GanlyrelrafsiContext, 0)

        def y(self):
            return self.getTypedRuleContext(SkabanParser.YContext, 0)

        def jvorebla(self):
            return self.getTypedRuleContext(SkabanParser.JvoreblaContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_bobvo

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBobvo"):
                listener.enterBobvo(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBobvo"):
                listener.exitBobvo(self)

    def bobvo(self):

        localctx = SkabanParser.BobvoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_bobvo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self.ganlyrelrafsi()
            self.state = 174
            self.y()
            self.state = 175
            self.jvorebla()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CobvoContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relrafsi(self):
            return self.getTypedRuleContext(SkabanParser.RelrafsiContext, 0)

        def jvorebla(self):
            return self.getTypedRuleContext(SkabanParser.JvoreblaContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_cobvo

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCobvo"):
                listener.enterCobvo(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCobvo"):
                listener.exitCobvo(self)

    def cobvo(self):

        localctx = SkabanParser.CobvoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_cobvo)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 177
            self.relrafsi()
            self.state = 179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SkabanParser.C:
                self.state = 178
                self.jvorebla()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DobvoContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gimsygenja(self):
            return self.getTypedRuleContext(SkabanParser.GimsygenjaContext, 0)

        def y(self):
            return self.getTypedRuleContext(SkabanParser.YContext, 0)

        def jvorebla(self):
            return self.getTypedRuleContext(SkabanParser.JvoreblaContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_dobvo

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDobvo"):
                listener.enterDobvo(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDobvo"):
                listener.exitDobvo(self)

    def dobvo(self):

        localctx = SkabanParser.DobvoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_dobvo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            self.gimsygenja()
            self.state = 182
            self.y()
            self.state = 183
            self.jvorebla()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FobvoContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rafsygimsygenja(self):
            return self.getTypedRuleContext(SkabanParser.RafsygimsygenjaContext, 0)

        def y(self):
            return self.getTypedRuleContext(SkabanParser.YContext, 0)

        def jvorebla(self):
            return self.getTypedRuleContext(SkabanParser.JvoreblaContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_fobvo

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFobvo"):
                listener.enterFobvo(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFobvo"):
                listener.exitFobvo(self)

    def fobvo(self):

        localctx = SkabanParser.FobvoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_fobvo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self.rafsygimsygenja()
            self.state = 186
            self.y()
            self.state = 187
            self.jvorebla()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GobvoContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ganlycmarafsi(self):
            return self.getTypedRuleContext(SkabanParser.GanlycmarafsiContext, 0)

        def gismu(self):
            return self.getTypedRuleContext(SkabanParser.GismuContext, 0)

        def q(self):
            return self.getTypedRuleContext(SkabanParser.QContext, 0)

        def y(self):
            return self.getTypedRuleContext(SkabanParser.YContext, 0)

        def gahorkarcmarafsi(self):
            return self.getTypedRuleContext(SkabanParser.GahorkarcmarafsiContext, 0)

        def karkarcmarafsi(self):
            return self.getTypedRuleContext(SkabanParser.KarkarcmarafsiContext, 0)

        def kargismu(self):
            return self.getTypedRuleContext(SkabanParser.KargismuContext, 0)

        def gahorgismu(self):
            return self.getTypedRuleContext(SkabanParser.GahorgismuContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_gobvo

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGobvo"):
                listener.enterGobvo(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGobvo"):
                listener.exitGobvo(self)

    def gobvo(self):

        localctx = SkabanParser.GobvoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_gobvo)
        try:
            self.state = 212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 18, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 189
                self.ganlycmarafsi()
                self.state = 192
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
                if la_ == 1:
                    self.state = 190
                    self.q()

                elif la_ == 2:
                    self.state = 191
                    self.y()

                self.state = 194
                self.gismu()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 196
                self.gahorkarcmarafsi()
                self.state = 198
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 16, self._ctx)
                if la_ == 1:
                    self.state = 197
                    self.q()

                self.state = 200
                self.gismu()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 202
                self.karkarcmarafsi()
                self.state = 203
                self.q()
                self.state = 204
                self.kargismu()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 206
                self.karkarcmarafsi()
                self.state = 208
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 17, self._ctx)
                if la_ == 1:
                    self.state = 207
                    self.q()

                self.state = 210
                self.gahorgismu()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GanlyrelrafsiContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ganlycmarafsi(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SkabanParser.GanlycmarafsiContext)
            else:
                return self.getTypedRuleContext(SkabanParser.GanlycmarafsiContext, i)

        def gahorkarcmarafsi(self):
            return self.getTypedRuleContext(SkabanParser.GahorkarcmarafsiContext, 0)

        def karkarcmarafsi(self):
            return self.getTypedRuleContext(SkabanParser.KarkarcmarafsiContext, 0)

        def q(self):
            return self.getTypedRuleContext(SkabanParser.QContext, 0)

        def y(self):
            return self.getTypedRuleContext(SkabanParser.YContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_ganlyrelrafsi

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGanlyrelrafsi"):
                listener.enterGanlyrelrafsi(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGanlyrelrafsi"):
                listener.exitGanlyrelrafsi(self)

    def ganlyrelrafsi(self):

        localctx = SkabanParser.GanlyrelrafsiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_ganlyrelrafsi)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 21, self._ctx)
            if la_ == 1:
                self.state = 214
                self.ganlycmarafsi()
                self.state = 217
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 19, self._ctx)
                if la_ == 1:
                    self.state = 215
                    self.q()

                elif la_ == 2:
                    self.state = 216
                    self.y()

                pass

            elif la_ == 2:
                self.state = 219
                self.gahorkarcmarafsi()
                self.state = 221
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 20, self._ctx)
                if la_ == 1:
                    self.state = 220
                    self.q()

                pass

            elif la_ == 3:
                self.state = 223
                self.karkarcmarafsi()
                self.state = 224
                self.q()
                pass

            self.state = 228
            self.ganlycmarafsi()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JvoreblaContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def karcmarafsi(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SkabanParser.KarcmarafsiContext)
            else:
                return self.getTypedRuleContext(SkabanParser.KarcmarafsiContext, i)

        def gismu(self):
            return self.getTypedRuleContext(SkabanParser.GismuContext, 0)

        def ganlycmarafsi(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SkabanParser.GanlycmarafsiContext)
            else:
                return self.getTypedRuleContext(SkabanParser.GanlycmarafsiContext, i)

        def gimsygenja(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SkabanParser.GimsygenjaContext)
            else:
                return self.getTypedRuleContext(SkabanParser.GimsygenjaContext, i)

        def y(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SkabanParser.YContext)
            else:
                return self.getTypedRuleContext(SkabanParser.YContext, i)

        def getRuleIndex(self):
            return SkabanParser.RULE_jvorebla

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJvorebla"):
                listener.enterJvorebla(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJvorebla"):
                listener.exitJvorebla(self)

    def jvorebla(self):

        localctx = SkabanParser.JvoreblaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_jvorebla)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 24, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 238
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 23, self._ctx)
                    if la_ == 1:
                        self.state = 230
                        self.ganlycmarafsi()
                        self.state = 232
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == SkabanParser.Y:
                            self.state = 231
                            self.y()

                        pass

                    elif la_ == 2:
                        self.state = 234
                        self.gimsygenja()
                        self.state = 235
                        self.y()
                        pass

                    elif la_ == 3:
                        self.state = 237
                        self.karcmarafsi()
                        pass

                self.state = 242
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 24, self._ctx)

            self.state = 245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
            if la_ == 1:
                self.state = 243
                self.karcmarafsi()
                pass

            elif la_ == 2:
                self.state = 244
                self.gismu()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelrafsiContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ganlyrelrafsi(self):
            return self.getTypedRuleContext(SkabanParser.GanlyrelrafsiContext, 0)

        def karlyrelrafsi(self):
            return self.getTypedRuleContext(SkabanParser.KarlyrelrafsiContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_relrafsi

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelrafsi"):
                listener.enterRelrafsi(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelrafsi"):
                listener.exitRelrafsi(self)

    def relrafsi(self):

        localctx = SkabanParser.RelrafsiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_relrafsi)
        try:
            self.state = 249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 26, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 247
                self.ganlyrelrafsi()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 248
                self.karlyrelrafsi()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GimsygenjaContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gahorgimsygenja(self):
            return self.getTypedRuleContext(SkabanParser.GahorgimsygenjaContext, 0)

        def kargimsygenja(self):
            return self.getTypedRuleContext(SkabanParser.KargimsygenjaContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_gimsygenja

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGimsygenja"):
                listener.enterGimsygenja(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGimsygenja"):
                listener.exitGimsygenja(self)

    def gimsygenja(self):

        localctx = SkabanParser.GimsygenjaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_gimsygenja)
        try:
            self.state = 253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 27, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 251
                self.gahorgimsygenja()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 252
                self.kargimsygenja()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RafsygimsygenjaContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ganlycmarafsi(self):
            return self.getTypedRuleContext(SkabanParser.GanlycmarafsiContext, 0)

        def gimsygenja(self):
            return self.getTypedRuleContext(SkabanParser.GimsygenjaContext, 0)

        def q(self):
            return self.getTypedRuleContext(SkabanParser.QContext, 0)

        def karcmarafsi(self):
            return self.getTypedRuleContext(SkabanParser.KarcmarafsiContext, 0)

        def kargimsygenja(self):
            return self.getTypedRuleContext(SkabanParser.KargimsygenjaContext, 0)

        def gahorgimsygenja(self):
            return self.getTypedRuleContext(SkabanParser.GahorgimsygenjaContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_rafsygimsygenja

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRafsygimsygenja"):
                listener.enterRafsygimsygenja(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRafsygimsygenja"):
                listener.exitRafsygimsygenja(self)

    def rafsygimsygenja(self):

        localctx = SkabanParser.RafsygimsygenjaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_rafsygimsygenja)
        try:
            self.state = 268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 29, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 255
                self.ganlycmarafsi()
                self.state = 257
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 28, self._ctx)
                if la_ == 1:
                    self.state = 256
                    self.q()

                self.state = 259
                self.gimsygenja()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 261
                self.karcmarafsi()
                self.state = 262
                self.q()
                self.state = 263
                self.kargimsygenja()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 265
                self.karcmarafsi()
                self.state = 266
                self.gahorgimsygenja()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GanlycmarafsiContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.C)
            else:
                return self.getToken(SkabanParser.C, i)

        def V(self):
            return self.getToken(SkabanParser.V, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_ganlycmarafsi

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGanlycmarafsi"):
                listener.enterGanlycmarafsi(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGanlycmarafsi"):
                listener.exitGanlycmarafsi(self)

    def ganlycmarafsi(self):

        localctx = SkabanParser.GanlycmarafsiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_ganlycmarafsi)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.match(SkabanParser.C)
            self.state = 271
            self.match(SkabanParser.V)
            self.state = 272
            self.match(SkabanParser.C)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GahorkarcmarafsiContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.C)
            else:
                return self.getToken(SkabanParser.C, i)

        def V(self):
            return self.getToken(SkabanParser.V, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_gahorkarcmarafsi

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGahorkarcmarafsi"):
                listener.enterGahorkarcmarafsi(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGahorkarcmarafsi"):
                listener.exitGahorkarcmarafsi(self)

    def gahorkarcmarafsi(self):

        localctx = SkabanParser.GahorkarcmarafsiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_gahorkarcmarafsi)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.match(SkabanParser.C)
            self.state = 275
            self.match(SkabanParser.C)
            self.state = 276
            self.match(SkabanParser.V)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KarkarcmarafsiContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C(self):
            return self.getToken(SkabanParser.C, 0)

        def V(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.V)
            else:
                return self.getToken(SkabanParser.V, i)

        def AP(self):
            return self.getToken(SkabanParser.AP, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_karkarcmarafsi

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKarkarcmarafsi"):
                listener.enterKarkarcmarafsi(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKarkarcmarafsi"):
                listener.exitKarkarcmarafsi(self)

    def karkarcmarafsi(self):

        localctx = SkabanParser.KarkarcmarafsiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_karkarcmarafsi)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(SkabanParser.C)
            self.state = 279
            self.match(SkabanParser.V)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SkabanParser.AP:
                self.state = 280
                self.match(SkabanParser.AP)

            self.state = 283
            self.match(SkabanParser.V)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KarcmarafsiContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gahorkarcmarafsi(self):
            return self.getTypedRuleContext(SkabanParser.GahorkarcmarafsiContext, 0)

        def karkarcmarafsi(self):
            return self.getTypedRuleContext(SkabanParser.KarkarcmarafsiContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_karcmarafsi

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKarcmarafsi"):
                listener.enterKarcmarafsi(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKarcmarafsi"):
                listener.exitKarcmarafsi(self)

    def karcmarafsi(self):

        localctx = SkabanParser.KarcmarafsiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_karcmarafsi)
        try:
            self.state = 287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 31, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 285
                self.gahorkarcmarafsi()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 286
                self.karkarcmarafsi()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KarlyrelrafsiContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gahorkarcmarafsi(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SkabanParser.GahorkarcmarafsiContext)
            else:
                return self.getTypedRuleContext(SkabanParser.GahorkarcmarafsiContext, i)

        def ganlycmarafsi(self):
            return self.getTypedRuleContext(SkabanParser.GanlycmarafsiContext, 0)

        def karkarcmarafsi(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SkabanParser.KarkarcmarafsiContext)
            else:
                return self.getTypedRuleContext(SkabanParser.KarkarcmarafsiContext, i)

        def q(self):
            return self.getTypedRuleContext(SkabanParser.QContext, 0)

        def y(self):
            return self.getTypedRuleContext(SkabanParser.YContext, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_karlyrelrafsi

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKarlyrelrafsi"):
                listener.enterKarlyrelrafsi(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKarlyrelrafsi"):
                listener.exitKarlyrelrafsi(self)

    def karlyrelrafsi(self):

        localctx = SkabanParser.KarlyrelrafsiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_karlyrelrafsi)
        try:
            self.state = 322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 39, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 35, self._ctx)
                if la_ == 1:
                    self.state = 289
                    self.ganlycmarafsi()
                    self.state = 292
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 32, self._ctx)
                    if la_ == 1:
                        self.state = 290
                        self.q()

                    elif la_ == 2:
                        self.state = 291
                        self.y()

                    pass

                elif la_ == 2:
                    self.state = 294
                    self.gahorkarcmarafsi()
                    self.state = 296
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 33, self._ctx)
                    if la_ == 1:
                        self.state = 295
                        self.q()

                    pass

                elif la_ == 3:
                    self.state = 298
                    self.karkarcmarafsi()
                    self.state = 300
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 34, self._ctx)
                    if la_ == 1:
                        self.state = 299
                        self.q()

                    pass

                self.state = 304
                self.gahorkarcmarafsi()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 38, self._ctx)
                if la_ == 1:
                    self.state = 306
                    self.ganlycmarafsi()
                    self.state = 309
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 36, self._ctx)
                    if la_ == 1:
                        self.state = 307
                        self.q()

                    elif la_ == 2:
                        self.state = 308
                        self.y()

                    pass

                elif la_ == 2:
                    self.state = 311
                    self.gahorkarcmarafsi()
                    self.state = 313
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 37, self._ctx)
                    if la_ == 1:
                        self.state = 312
                        self.q()

                    pass

                elif la_ == 3:
                    self.state = 315
                    self.karkarcmarafsi()
                    self.state = 316
                    self.q()
                    pass

                self.state = 320
                self.karkarcmarafsi()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GahorgimsygenjaContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.C)
            else:
                return self.getToken(SkabanParser.C, i)

        def V(self):
            return self.getToken(SkabanParser.V, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_gahorgimsygenja

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGahorgimsygenja"):
                listener.enterGahorgimsygenja(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGahorgimsygenja"):
                listener.exitGahorgimsygenja(self)

    def gahorgimsygenja(self):

        localctx = SkabanParser.GahorgimsygenjaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_gahorgimsygenja)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(SkabanParser.C)
            self.state = 325
            self.match(SkabanParser.C)
            self.state = 326
            self.match(SkabanParser.V)
            self.state = 327
            self.match(SkabanParser.C)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KargimsygenjaContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C(self, i: int = None):
            if i is None:
                return self.getTokens(SkabanParser.C)
            else:
                return self.getToken(SkabanParser.C, i)

        def V(self):
            return self.getToken(SkabanParser.V, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_kargimsygenja

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKargimsygenja"):
                listener.enterKargimsygenja(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKargimsygenja"):
                listener.exitKargimsygenja(self)

    def kargimsygenja(self):

        localctx = SkabanParser.KargimsygenjaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_kargimsygenja)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.match(SkabanParser.C)
            self.state = 330
            self.match(SkabanParser.V)
            self.state = 331
            self.match(SkabanParser.C)
            self.state = 332
            self.match(SkabanParser.C)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C(self):
            return self.getToken(SkabanParser.C, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_q

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQ"):
                listener.enterQ(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQ"):
                listener.exitQ(self)

    def q(self):

        localctx = SkabanParser.QContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_q)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.match(SkabanParser.C)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Y(self):
            return self.getToken(SkabanParser.Y, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_y

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterY"):
                listener.enterY(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitY"):
                listener.exitY(self)

    def y(self):

        localctx = SkabanParser.YContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_y)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(SkabanParser.Y)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuhivlaContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anychar(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SkabanParser.AnycharContext)
            else:
                return self.getTypedRuleContext(SkabanParser.AnycharContext, i)

        def getRuleIndex(self):
            return SkabanParser.RULE_fuhivla

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFuhivla"):
                listener.enterFuhivla(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFuhivla"):
                listener.exitFuhivla(self)

    def fuhivla(self):

        localctx = SkabanParser.FuhivlaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_fuhivla)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 338
                self.anychar()
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SkabanParser.DOT)
                                | (1 << SkabanParser.C)
                                | (1 << SkabanParser.V)
                                | (1 << SkabanParser.Y)
                                | (1 << SkabanParser.AP)
                                | (1 << SkabanParser.EXTRA)
                            )
                        )
                        != 0
                    )
                ):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnycharContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C(self):
            return self.getToken(SkabanParser.C, 0)

        def V(self):
            return self.getToken(SkabanParser.V, 0)

        def DOT(self):
            return self.getToken(SkabanParser.DOT, 0)

        def Y(self):
            return self.getToken(SkabanParser.Y, 0)

        def AP(self):
            return self.getToken(SkabanParser.AP, 0)

        def EXTRA(self):
            return self.getToken(SkabanParser.EXTRA, 0)

        def getRuleIndex(self):
            return SkabanParser.RULE_anychar

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnychar"):
                listener.enterAnychar(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnychar"):
                listener.exitAnychar(self)

    def anychar(self):

        localctx = SkabanParser.AnycharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_anychar)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SkabanParser.DOT)
                            | (1 << SkabanParser.C)
                            | (1 << SkabanParser.V)
                            | (1 << SkabanParser.Y)
                            | (1 << SkabanParser.AP)
                            | (1 << SkabanParser.EXTRA)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx
